{"version":3,"sources":["components/Box/Box.tsx","features/Point/Point.ts","features/Grid/Grid.ts","features/Coordinates/Coordinates.ts","features/MarsRover/MarsRover.ts","components/ControlButton/ControlButton.tsx","components/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoxType","Point","point1","point2","x","y","Grid","desiredPoint","self","obstacles","some","DirectionType","Box","type","rest","className","CommandType","DIRECTIONS_ORDER","East","South","West","North","Coordinates","position","direction","hasObstacles","coords","undefined","Error","startsWith","replace","splittedCoords","split","row","col","Number","isNaN","Object","values","includes","result","_MarsRover","tryMoveTowardsPoint","point","grid","coordinates","getMoveFunction","desiredX","cols","desiredY","rows","moveForward","fn","err","MarsRover","commands","reduce","command","prevCoordinates","Move","currentCoordinates","RotateRight","indexOf","length","RotateLeft","index","ControlButton","children","onClick","_","Controls","DirectionToRotateMap","Board","props","useState","rover","setRover","visitedPoints","setVisitedPoints","controlRover","useCallback","parsedCoordinates","useEffect","onKeyDown","event","key","window","addEventListener","removeEventListener","getType","currentPoint","Obstacle","Rover","Visited","NotVisited","Array","fill","map","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0099af37.chunk.js","sourcesContent":["import React from \"react\";\n\nexport enum BoxType {\n    Rover = \"R\",\n    Obstacle = \"X\",\n    Visited = \"V\",\n    NotVisited = \"O\",\n}\n\nexport interface IBoxProps {\n    type: BoxType,\n}\n\nconst Box: React.FC<IBoxProps> = ({ type, ...rest }) => {\n    return <div className=\"p-2 h-10 w-10 bg-gray-900 rounded-full flex items-center justify-center\" {...rest} >{type}</div>;\n}\n\nexport default Box;","export interface IPoint {\n    x: number;\n    y: number;\n}\n\nexport const Point = {\n    equals: (point1: IPoint) => (point2: IPoint) => {\n        return point1 === point2 || (\n            !!point1\n            && !!point2\n            && point1.x === point2.x\n            && point1.y === point2.y\n        );\n    }\n};\n","import {IPoint, Point} from \"../Point/Point\";\n\nexport interface IGrid {\n    readonly rows: number;\n    readonly cols: number;\n    readonly obstacles?: IPoint[];\n}\n\nexport const Grid = {\n    new: ([rows, cols = rows]: [rows: number, cols?: number], obstacles?: IPoint[]): IGrid => {\n        return {\n            rows,\n            cols: cols ?? rows,\n            obstacles: obstacles ?? [],\n        };\n    },\n\n    hasObstacleOnPoint: (desiredPoint: IPoint) => (self: IGrid) => self.obstacles\n        ?.some?.(Point.equals(desiredPoint)),\n}\n","import {IPoint} from \"../Point/Point\";\n\nexport enum DirectionType {\n    East = \"E\",\n    West = \"W\",\n    North = \"N\",\n    South = \"S\",\n}\n\nexport const DIRECTIONS_ORDER = [DirectionType.East, DirectionType.South, DirectionType.West, DirectionType.North];\n\nexport interface ICoordinates {\n    position: IPoint;\n    direction: DirectionType;\n    hasObstacles: boolean;\n}\n\nexport const Coordinates = {\n    new: (position: IPoint, direction: DirectionType = DirectionType.North, hasObstacles: boolean = false): ICoordinates => {\n        return {\n            position: { ...position },\n            direction,\n            hasObstacles,\n        }\n    },\n\n    parse: (coords: string): [ICoordinates?, Error?] => {\n        if (!coords) {\n            return [undefined, Error(\"Coordinates are required!\")];\n        }\n\n        let hasObstacles = false;\n        if (coords.startsWith(\"O:\")) {\n            hasObstacles = true;\n            coords = coords.replace(\"O:\", \"\");\n        }\n\n        const splittedCoords = coords.split(\":\");\n\n        const row = +splittedCoords[0];\n        const col = +splittedCoords[1];\n        const direction = splittedCoords[2] as DirectionType;\n\n        if (Number.isNaN(row)) {\n            return [undefined, Error(\"Rows are required!\")];\n        }\n\n        if (Number.isNaN(col)) {\n            return [undefined, Error(\"Columns are required\")];\n        }\n\n        if (!direction || !Object.values(DirectionType).includes(direction)) {\n            return [undefined, Error(`Direction is not one of the possible: ${DirectionType}`)];\n        }\n\n        return [{ position: { x: row, y: col }, direction, hasObstacles }];\n    },\n\n    toString: (self: ICoordinates): string => {\n        let result = `${self.position.x}:${self.position.y}:${self.direction}`\n\n        if (self.hasObstacles) {\n            result = \"O:\" + result;\n        }\n\n        return result;\n    },\n};\n","import {Grid, IGrid} from \"../Grid/Grid\";\nimport {Coordinates, DIRECTIONS_ORDER, DirectionType, ICoordinates} from \"../Coordinates/Coordinates\";\nimport {IPoint} from \"../Point/Point\";\n\nexport enum CommandType {\n    Move = \"M\",\n    RotateLeft = \"L\",\n    RotateRight = \"R\",\n}\n\nexport interface IMarsRover {\n    coordinates: ICoordinates;\n}\n\nconst _MarsRover = {\n    tryMoveTowardsPoint: (point: Partial<IPoint>) => (grid: IGrid) => (coordinates: ICoordinates): ICoordinates => {\n        const desiredPoint = {...coordinates.position, ...point};\n        if (Grid.hasObstacleOnPoint(desiredPoint)(grid)) {\n            return {\n                ...coordinates,\n                hasObstacles: true,\n            };\n        }\n\n        return {\n            ...coordinates,\n            position: desiredPoint,\n            hasObstacles: false,\n        }\n    },\n\n    getMoveFunction: (grid: IGrid) => (coordinates: ICoordinates): [((grid: IGrid) => (coordinates: ICoordinates) => ICoordinates)?, Error?] => {\n        switch (coordinates.direction) {\n            case DirectionType.East: {\n                const desiredX = (coordinates.position.x + 1) % grid.cols;\n                return [_MarsRover.tryMoveTowardsPoint({x: desiredX})];\n            }\n            case DirectionType.West: {\n                const desiredX = (!coordinates.position.x ? grid.cols : coordinates.position.x) - 1;\n                return [_MarsRover.tryMoveTowardsPoint({x: desiredX})];\n            }\n            case DirectionType.North: {\n                const desiredY = (coordinates.position.y + 1) % grid.rows;\n                return [_MarsRover.tryMoveTowardsPoint({y: desiredY})];\n            }\n            case DirectionType.South: {\n                const desiredY = (!coordinates.position.y ? grid.rows : coordinates.position.y) - 1;\n                return [_MarsRover.tryMoveTowardsPoint({y: desiredY})];\n            }\n            default:\n                return [undefined, Error(\"Unknown direction!\")];\n        }\n    },\n\n    moveForward: (grid: IGrid) => (coordinates: ICoordinates): [ICoordinates?, Error?] => {\n        const [fn, err] = _MarsRover.getMoveFunction(grid)(coordinates);\n        if (err || !fn) {\n            return [undefined, err];\n        }\n\n        return [fn(grid)(coordinates)];\n    },\n}\n\nexport const MarsRover = {\n    new(coordinates: ICoordinates = Coordinates.parse(\"0:0:N\")[0]!): IMarsRover {\n        return {\n            coordinates,\n        };\n    },\n\n    execute: (commands: string | CommandType[]) => (grid: IGrid) => (self: IMarsRover): [string?, Error?] => {\n        if (!commands) {\n            return [undefined, Error(\"Command/s is not valid!\")];\n        }\n\n        const _commands = (typeof commands === \"string\" ? commands.split(\"\") : commands);\n        const [coordinates,] = _commands\n            .reduce<[ICoordinates, Error?]>(([prevCoordinates, error], command) => {\n                switch (command as CommandType) {\n                    case CommandType.Move:\n                        const [currentCoordinates, err] = _MarsRover.moveForward(grid)(prevCoordinates);\n                        if (err || !currentCoordinates) {\n                            return [prevCoordinates, err];\n                        }\n\n                        return [currentCoordinates];\n                    case CommandType.RotateRight:\n                        return [Coordinates.new(\n                            prevCoordinates.position,\n                            DIRECTIONS_ORDER[(DIRECTIONS_ORDER.indexOf(prevCoordinates.direction) + 1) % DIRECTIONS_ORDER.length],\n                            false,\n                        )];\n                    case CommandType.RotateLeft:\n                        const index = DIRECTIONS_ORDER.indexOf(prevCoordinates.direction);\n                        return [Coordinates.new(\n                            prevCoordinates.position,\n                            DIRECTIONS_ORDER[(!index ? DIRECTIONS_ORDER.length : index) - 1],\n                            false,\n                        )];\n                    default:\n                        return [prevCoordinates, Error(\"Command type not known!\")];\n                }\n            }, [{...self.coordinates}]);\n\n        return [Coordinates.toString(coordinates)];\n    },\n}\n","import React from \"react\";\n\nexport interface IControlButtonProps {\n    children: string;\n    onClick?: Function;\n}\n\nconst ControlButton: React.FC<IControlButtonProps> = ({ children, onClick }) => (\n    <button className=\"bg-gray-300 text-black rounded m-2\" onClick={(_) => onClick?.()}>{children}</button>\n);\n\nexport default ControlButton;","import React, {useCallback, useEffect, useState} from \"react\";\nimport {Grid, IGrid} from \"../../features/Grid/Grid\";\nimport Box, {BoxType} from \"../Box/Box\";\nimport {IPoint, Point} from \"../../features/Point/Point\";\nimport {CommandType, MarsRover} from \"../../features/MarsRover/MarsRover\";\nimport {Coordinates, DirectionType} from \"../../features/Coordinates/Coordinates\";\nimport ControlButton from \"../ControlButton/ControlButton\";\n\nexport interface IBoardProps {\n    grid: IGrid;\n}\n\nexport const Controls = {\n    Move: [\"k\", \"ArrowUp\"],\n    RotateLeft: [\"j\", \"ArrowLeft\"],\n    RotateRight: [\"l\", \"ArrowRight\"],\n}\n\nexport const DirectionToRotateMap: Record<DirectionType, string> = {\n    [DirectionType.East]: \"\",\n    [DirectionType.North]: \"-rotate-90\",\n    [DirectionType.West]: \"rotate-180\",\n    [DirectionType.South]: \"rotate-90\",\n};\n\nconst Board: React.FC<IBoardProps> = (props) => {\n    const [rover, setRover] = useState(MarsRover.new());\n    const [visitedPoints, setVisitedPoints] = useState<IPoint[]>([{ ...rover.coordinates.position }]);\n\n    const controlRover = useCallback((command: CommandType) => {\n        const [coordinates, execError] = MarsRover.execute([command])(props.grid)(rover);\n        if (execError || !coordinates) {\n            return;\n        }\n\n        const [parsedCoordinates, parseError] = Coordinates.parse(coordinates);\n        if (parseError || !parsedCoordinates) {\n            return;\n        }\n\n        setRover(MarsRover.new(parsedCoordinates));\n        setVisitedPoints([...visitedPoints, { ...parsedCoordinates.position }]);\n\n    }, [props.grid, rover, visitedPoints]);\n\n    useEffect(() => {\n        const onKeyDown = (event: KeyboardEvent) => {\n            if (Controls.Move.includes(event.key)) {\n                controlRover(CommandType.Move);\n                return;\n            }\n\n            if (Controls.RotateLeft.includes(event.key)) {\n                controlRover(CommandType.RotateLeft);\n                return;\n            }\n\n            if (Controls.RotateRight.includes(event.key)) {\n                controlRover(CommandType.RotateRight);\n                return;\n            }\n        };\n\n        window.addEventListener(\"keydown\", onKeyDown);\n\n        return () => {\n            window.removeEventListener(\"keydown\", onKeyDown)\n        }\n    }, [controlRover]);\n\n    const getType = useCallback((currentPoint: IPoint): BoxType => {\n        if (Grid.hasObstacleOnPoint(currentPoint)(props.grid)) {\n            return BoxType.Obstacle;\n        }\n\n        if (Point.equals(rover.coordinates.position)(currentPoint)) {\n            return BoxType.Rover;\n        }\n\n        if (visitedPoints.some(Point.equals(currentPoint))) {\n            return BoxType.Visited;\n        }\n\n        return BoxType.NotVisited;\n    }, [props.grid, rover.coordinates.position, visitedPoints]);\n\n    const rows = Array(props.grid.cols).fill(null)\n        .map((_, row) => {\n                const cols = Array(props.grid.rows).fill(null)\n                    .map((_, col) => {\n                            const id = `e_${row}_${col}`;\n                            const type = getType({ x: row, y: col });\n\n                            return (\n                                <div\n                                    key={id}\n                                    className={type === BoxType.Rover ? `transform ${DirectionToRotateMap[rover.coordinates.direction]}` : \"\"}\n                                >\n                                    <Box\n                                        type={type}\n                                        data-testid={id}\n                                    />\n                                </div>\n                            );\n                        }\n                    );\n\n                return (\n                    <div key={row} className=\"flex flex-col-reverse\">\n                        {cols}\n                    </div>\n                );\n            }\n        );\n\n    return (\n        <div className=\"flex flex-col items-center space-x-5 space-y-5\">\n            <div className=\"h-10\">\n                {rover.coordinates.hasObstacles && <span>BLOCKED BY OBSTACLE!</span>}\n            </div>\n            <div className=\"flex\">\n                {rows}\n            </div>\n            <div className=\"flex flex-row justify-between content-center\">\n                <ControlButton onClick={() => controlRover(CommandType.RotateLeft)}>Rotate Left</ControlButton>\n                <ControlButton onClick={() => controlRover(CommandType.Move)}>Move Forward</ControlButton>\n                <ControlButton onClick={() => controlRover(CommandType.RotateRight)}>Rotate Right</ControlButton>\n            </div>\n        </div>\n    );\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from \"./components/Board/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board grid={{ rows: 5, cols: 7, obstacles: [{x: 1, y: 3}] }} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}