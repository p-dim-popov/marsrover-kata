{"version":3,"sources":["components/Box/Box.tsx","features/Coordinates/Coordinates.ts","features/Point.ts","features/utils.ts","features/MarsRover/MarsRover.ts","components/Board/Board.tsx","features/Grid/Grid.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoxType","DirectionType","Box","type","rest","className","Point","x","y","point","this","isNullNanUndefinedOrEmptyString","value","Number","isNaN","CommandType","DIRECTIONS_ORDER","East","South","West","North","Coordinates","position","direction","hasObstacles","data","parse","result","coords","Error","startsWith","replace","splittedCoords","split","row","col","Object","values","includes","ControlType","MarsRover","grid","coordinates","onSuccess","hasObstacleOnPoint","desiredX","cols","tryMoveTowardsPoint","desiredY","rows","commands","Move","moveForward","RotateRight","indexOf","length","RotateLeft","index","toString","Board","props","rover","useRef","useState","current","visitedPoints","setVisitedPoints","useEffect","onKeyDown","event","key","execute","window","addEventListener","removeEventListener","Array","fill","map","_","id","currentPoint","Obstacle","equals","Rover","some","Visited","NotVisited","getType","Grid","obstacles","desiredPoint","isArray","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a1d3d30.chunk.js","sourcesContent":["import React from \"react\";\n\nexport enum BoxType {\n    Rover = \"R\",\n    Obstacle = \"X\",\n    Visited = \"V\",\n    NotVisited = \"O\",\n}\n\nexport interface IBoxProps {\n    type: BoxType,\n}\n\nconst Box: React.FC<IBoxProps> = ({ type, ...rest }) => {\n    return <div className=\"p-2 bg-gray-900\" {...rest} >{type}</div>;\n}\n\nexport default Box;","import {isNullNanUndefinedOrEmptyString} from \"../utils\";\nimport {Point} from \"../Point\";\n\nexport enum DirectionType {\n    East = \"E\",\n    West = \"W\",\n    North = \"N\",\n    South = \"S\",\n}\n\nexport const DIRECTIONS_ORDER = [DirectionType.East, DirectionType.South, DirectionType.West, DirectionType.North];\n\nexport interface ICoordinates {\n    position: Point;\n    direction: DirectionType;\n    hasObstacles: boolean;\n    toString(): string;\n}\n\nexport interface ICoordinatesConstructor {\n    new(coords: string): ICoordinates;\n    new(position: Point, direction: string, hasObstacles?: boolean): ICoordinates;\n\n    parse(coords: string): ICoordinates;\n}\n\n// TODO: Fix typings\n// @ts-ignore\nexport const Coordinates: ICoordinatesConstructor = class Coordinates implements ICoordinates {\n    readonly position: Point;\n    direction: DirectionType = DirectionType.North;\n    hasObstacles = false;\n\n    constructor(position: string | Point, direction: DirectionType, hasObstacles: boolean = false) {\n        if (typeof position === \"string\") {\n            // TODO: implement clone\n            const data = Coordinates.parse(position);\n            this.position = new Point(data.position.x, data.position.y);\n            this.direction = data.direction;\n            this.hasObstacles = data.hasObstacles;\n        } else {\n            this.position = new Point(position.x, position.y);\n            this.direction = direction;\n            this.hasObstacles = hasObstacles;\n        }\n    }\n\n    static parse(coords: string): Coordinates {\n        if (!coords) {\n            throw new Error(\"Not valid coordinates!\")\n        }\n\n        let hasObstacles = false;\n        if (coords.startsWith(\"O:\")) {\n            hasObstacles = true;\n            coords = coords.replace(\"O:\", \"\");\n        }\n\n        const splittedCoords = coords.split(\":\");\n\n        const row = +splittedCoords[0];\n        const col = +splittedCoords[1];\n        const direction = splittedCoords[2] as DirectionType;\n\n        if (isNullNanUndefinedOrEmptyString(row)\n            || isNullNanUndefinedOrEmptyString(col)\n            || isNullNanUndefinedOrEmptyString(direction) || !Object.values(DirectionType).includes(direction)) {\n            throw new Error(\"Not valid coordinates!\")\n        }\n\n        return new Coordinates(new Point(row, col), direction, hasObstacles);\n    }\n\n    toString(): string {\n        let result = `${this.position.x}:${this.position.y}:${this.direction}`\n\n        if (this.hasObstacles) {\n            result = \"O:\" + result;\n        }\n\n        return result;\n    }\n}\n\nexport default Coordinates;","export class Point {\n    constructor(public x: number, public y: number) {}\n\n    equals(point: Point) {\n        return !!point && this.x === point.x && this.y === point.y;\n    }\n}","export const isNullNanUndefinedOrEmptyString = (value: any): boolean => {\n    return value === null || value === void 0 || Number.isNaN(value) || value === \"\";\n}\n\nexport const stringifyCoordinates = (row?: number, col?: number, direction?: string, hasObstacles?: boolean | string) => {\n    let result = `${row}:${col}:${direction}`;\n    switch (typeof hasObstacles) {\n        case \"boolean\":\n            if (hasObstacles) {\n                result = \"O:\" + result;\n            }\n            break;\n        case \"string\":\n            result = hasObstacles + result;\n            break;\n        default:\n            break;\n    }\n\n    return result;\n}","import {Grid} from \"../Grid/Grid\";\nimport {Coordinates, DIRECTIONS_ORDER, DirectionType, ICoordinates} from \"../Coordinates/Coordinates\";\nimport {Point} from \"../Point\";\n\nexport enum CommandType {\n    Move = \"M\",\n    RotateLeft = \"L\",\n    RotateRight = \"R\",\n}\n\nexport interface IMarsRover {\n    coordinates: ICoordinates;\n    execute(command: string | CommandType[]): string;\n}\n\nexport interface IMarsRoverConstructor {\n    new(grid: Grid): IMarsRover;\n}\n\nexport const MarsRover: IMarsRoverConstructor = class implements IMarsRover {\n    coordinates = new Coordinates(\"0:0:N\");\n\n    constructor(private readonly grid: Grid) {}\n\n    private tryMoveTowardsPoint(point: Point, onSuccess: Function) {\n        if (this.grid.hasObstacleOnPoint(point)) {\n            this.coordinates.hasObstacles = true;\n            return;\n        }\n\n        this.coordinates.hasObstacles = false;\n        onSuccess();\n    }\n\n    private moveForward(): void {\n        switch (this.coordinates.direction) {\n            case DirectionType.East: {\n                const desiredX = (this.coordinates.position.x + 1) % this.grid.cols;\n                this.tryMoveTowardsPoint(new Point(desiredX, this.coordinates.position.y), () => this.coordinates.position.x = desiredX)\n                break;\n            }\n            case DirectionType.West: {\n                const desiredX = (!this.coordinates.position.x ? this.grid.cols : this.coordinates.position.x) - 1;\n                this.tryMoveTowardsPoint(new Point(desiredX, this.coordinates.position.y), () => this.coordinates.position.x = desiredX)\n                break;\n            }\n            case DirectionType.North: {\n                const desiredY = (this.coordinates.position.y + 1) % this.grid.rows;\n                this.tryMoveTowardsPoint(new Point(this.coordinates.position.x, desiredY), () => this.coordinates.position.y = desiredY);\n                break;\n            }\n            case DirectionType.South: {\n                const desiredY = (!this.coordinates.position.y ? this.grid.rows : this.coordinates.position.y) - 1;\n                this.tryMoveTowardsPoint(new Point(this.coordinates.position.x, desiredY), () => this.coordinates.position.y = desiredY);\n                break;\n            }\n            default:\n                throw new Error(\"Unknown direction!\")\n        }\n    }\n\n    execute(commands: string | CommandType[]): string {\n        if (!commands) {\n            throw new Error(\"Command/s is not valid!\");\n        }\n\n        for (const _ of typeof commands === \"string\" ? commands.split(\"\"): commands) {\n            const command = _ as CommandType;\n            switch (command) {\n                case CommandType.Move:\n                    this.moveForward();\n                    break;\n                case CommandType.RotateRight:\n                    this.coordinates.direction = DIRECTIONS_ORDER[(DIRECTIONS_ORDER.indexOf(this.coordinates.direction) + 1) % DIRECTIONS_ORDER.length];\n                    break;\n                case CommandType.RotateLeft:\n                    const index = DIRECTIONS_ORDER.indexOf(this.coordinates.direction);\n                    this.coordinates.direction = DIRECTIONS_ORDER[(!index ? DIRECTIONS_ORDER.length : index) - 1];\n                    break;\n                default:\n                    throw new Error(\"Command type not known!\");\n            }\n        }\n\n        return this.coordinates.toString();\n    }\n}\n\nexport default MarsRover;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Grid} from \"../../features/Grid/Grid\";\nimport Box, {BoxType} from \"../Box/Box\";\nimport {Point} from \"../../features/Point\";\nimport MarsRover, {CommandType} from \"../../features/MarsRover/MarsRover\";\n\nexport interface IBoardProps {\n    grid: Grid;\n}\n\nexport enum ControlType {\n    Move = \"k\",\n    RotateLeft = \"j\",\n    RotateRight = \"l\",\n}\n\nconst Board: React.FC<IBoardProps> = (props) => {\n    const rover = useRef(new MarsRover(props.grid));\n    const [visitedPoints, setVisitedPoints] = useState<Point[]>([new Point(rover.current.coordinates.position.x, rover.current.coordinates.position.y)]);\n\n    useEffect(() => {\n        const onKeyDown = (event: KeyboardEvent) => {\n            switch (event.key as ControlType) {\n                case ControlType.Move:\n                    rover.current.execute([CommandType.Move]);\n                    setVisitedPoints([...visitedPoints, new Point(rover.current.coordinates.position.x, rover.current.coordinates.position.y)]);\n                    break;\n                case ControlType.RotateLeft:\n                    rover.current.execute([CommandType.RotateLeft]);\n                    break;\n                case ControlType.RotateRight:\n                    rover.current.execute([CommandType.RotateRight]);\n                    break;\n            }\n        };\n\n        window.addEventListener(\"keydown\", onKeyDown);\n\n        return () => {\n            window.removeEventListener(\"keydown\", onKeyDown)\n        }\n    }, [visitedPoints]);\n\n    const getType = (currentPoint: Point) => {\n        if (props.grid.hasObstacleOnPoint(currentPoint)) {\n            return BoxType.Obstacle;\n        }\n\n        if (rover.current.coordinates.position.equals(currentPoint)) {\n            return BoxType.Rover;\n        }\n\n        if (visitedPoints.some(point => point.equals(currentPoint))) {\n            return BoxType.Visited;\n        }\n\n        return BoxType.NotVisited;\n    }\n\n    const rows = Array(props.grid.cols).fill(null)\n        .map((_, row) => {\n                const cols = Array(props.grid.rows).fill(null)\n                    .map((_, col) => {\n                            const id = `e_${row}_${col}`;\n                            const currentPoint = new Point(row, col);\n                            const type = getType(currentPoint);\n\n                            return (\n                                <Box\n                                    type={type}\n                                    key={id}\n                                    data-testid={id}\n                                />\n                            );\n                        }\n                    );\n\n                return (\n                    <div key={row} className=\"flex flex-col-reverse\">\n                        {cols}\n                    </div>\n                );\n            }\n        );\n\n    return (\n        <div className=\"flex flex-col\">\n            {rover.current.coordinates.hasObstacles && <span>BLOCKED BY OBSTACLE!</span>}\n            <div className=\"flex\">\n                {rows}\n            </div>\n        </div>\n    );\n}\n\nexport default Board;","import {Point} from \"../Point\";\n\nexport class Grid {\n    public readonly rows: number;\n    public readonly cols: number;\n    public readonly obstacles: Point[];\n\n    constructor(rows: number, cols?: number | Point[], obstacles?: Point[]) {\n        this.rows = rows;\n        this.cols = rows;\n        this.obstacles = obstacles ?? [];\n\n        if (typeof cols === \"number\") {\n            this.cols = cols;\n        } else if (Array.isArray(cols)) {\n            this.obstacles = cols;\n        }\n    }\n\n    hasObstacleOnPoint = (desiredPoint: Point) => this.obstacles\n        .some(point => point.x === desiredPoint.x && point.y === desiredPoint.y)\n}\n","import React from 'react';\nimport './App.css';\nimport Board from \"./components/Board/Board\";\nimport {Grid} from \"./features/Grid/Grid\";\nimport {Point} from \"./features/Point\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board grid={new Grid(5, 7, [ new Point(1, 3) ])} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}