{"version":3,"sources":["components/Box/Box.tsx","features/Coordinates/Coordinates.ts","features/Point/Point.ts","features/utils.ts","features/MarsRover/MarsRover.ts","components/ControlButton/ControlButton.tsx","components/Board/Board.tsx","features/Grid/Grid.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoxType","DirectionType","Box","type","rest","className","Point","x","y","point","this","clone","isNullNanUndefinedOrEmptyString","value","Number","isNaN","CommandType","DIRECTIONS_ORDER","East","South","West","North","Coordinates","position","direction","hasObstacles","data","parse","result","coords","Error","startsWith","replace","splittedCoords","split","row","col","Object","values","includes","MarsRover","grid","coordinates","onSuccess","hasObstacleOnPoint","desiredX","cols","tryMoveTowardsPoint","desiredY","rows","commands","Move","moveForward","RotateRight","indexOf","length","RotateLeft","index","toString","ControlButton","children","onClick","_","Controls","DirectionToRotateMap","Board","props","rover","useRef","useState","current","visitedPoints","setVisitedPoints","forceUpdate","setX","useForceUpdate","useCallback","execute","rotate","useEffect","onKeyDown","event","key","window","addEventListener","removeEventListener","getType","currentPoint","Obstacle","equals","Rover","some","Visited","NotVisited","Array","fill","map","id","Grid","obstacles","desiredPoint","isArray","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7c69bcd.chunk.js","sourcesContent":["import React from \"react\";\n\nexport enum BoxType {\n    Rover = \"R\",\n    Obstacle = \"X\",\n    Visited = \"V\",\n    NotVisited = \"O\",\n}\n\nexport interface IBoxProps {\n    type: BoxType,\n}\n\nconst Box: React.FC<IBoxProps> = ({ type, ...rest }) => {\n    return <div className=\"p-2 h-10 w-10 bg-gray-900 rounded-full flex items-center justify-center\" {...rest} >{type}</div>;\n}\n\nexport default Box;","import {isNullNanUndefinedOrEmptyString} from \"../utils\";\nimport {Point} from \"../Point/Point\";\n\nexport enum DirectionType {\n    East = \"E\",\n    West = \"W\",\n    North = \"N\",\n    South = \"S\",\n}\n\nexport const DIRECTIONS_ORDER = [DirectionType.East, DirectionType.South, DirectionType.West, DirectionType.North];\n\nexport interface ICoordinates {\n    position: Point;\n    direction: DirectionType;\n    hasObstacles: boolean;\n    toString(): string;\n}\n\nexport interface ICoordinatesConstructor {\n    new(coords: string): ICoordinates;\n    new(position: Point, direction: string, hasObstacles?: boolean): ICoordinates;\n\n    parse(coords: string): ICoordinates;\n}\n\n// TODO: Fix typings\n// @ts-ignore\nexport const Coordinates: ICoordinatesConstructor = class Coordinates implements ICoordinates {\n    readonly position: Point;\n    direction: DirectionType = DirectionType.North;\n    hasObstacles = false;\n\n    constructor(position: string | Point, direction: DirectionType, hasObstacles: boolean = false) {\n        if (typeof position === \"string\") {\n            const data = Coordinates.parse(position);\n            this.position = Point.clone(data.position);\n            this.direction = data.direction;\n            this.hasObstacles = data.hasObstacles;\n        } else {\n            this.position = new Point(position.x, position.y);\n            this.direction = direction;\n            this.hasObstacles = hasObstacles;\n        }\n    }\n\n    static parse(coords: string): Coordinates {\n        if (!coords) {\n            throw new Error(\"Not valid coordinates!\")\n        }\n\n        let hasObstacles = false;\n        if (coords.startsWith(\"O:\")) {\n            hasObstacles = true;\n            coords = coords.replace(\"O:\", \"\");\n        }\n\n        const splittedCoords = coords.split(\":\");\n\n        const row = +splittedCoords[0];\n        const col = +splittedCoords[1];\n        const direction = splittedCoords[2] as DirectionType;\n\n        if (isNullNanUndefinedOrEmptyString(row)\n            || isNullNanUndefinedOrEmptyString(col)\n            || isNullNanUndefinedOrEmptyString(direction) || !Object.values(DirectionType).includes(direction)) {\n            throw new Error(\"Not valid coordinates!\")\n        }\n\n        return new Coordinates(new Point(row, col), direction, hasObstacles);\n    }\n\n    toString(): string {\n        let result = `${this.position.x}:${this.position.y}:${this.direction}`\n\n        if (this.hasObstacles) {\n            result = \"O:\" + result;\n        }\n\n        return result;\n    }\n}\n\nexport default Coordinates;","export interface IPoint {\n    x: number;\n    y: number;\n}\n\nexport class Point implements IPoint {\n    static clone(point: IPoint): Point {\n        return new Point(point.x, point.y);\n    }\n\n    constructor(public x: number, public y: number) {}\n\n    equals(point: Point) {\n        return !!point && this.x === point.x && this.y === point.y;\n    }\n\n    clone(): Point {\n        return Point.clone(this);\n    }\n}\n\nexport default Point;\n","import {useState} from \"react\";\n\nexport const isNullNanUndefinedOrEmptyString = (value: any): boolean => {\n    return value === null || value === void 0 || Number.isNaN(value) || value === \"\";\n}\n\nexport const stringifyCoordinates = (row?: number, col?: number, direction?: string, hasObstacles?: boolean | string) => {\n    let result = `${row}:${col}:${direction}`;\n    switch (typeof hasObstacles) {\n        case \"boolean\":\n            if (hasObstacles) {\n                result = \"O:\" + result;\n            }\n            break;\n        case \"string\":\n            result = hasObstacles + result;\n            break;\n        default:\n            break;\n    }\n\n    return result;\n}\n\nexport const useForceUpdate = () => {\n    const [x, setX] = useState(1);\n    return () => setX(x + 1);\n}\n","import {Grid} from \"../Grid/Grid\";\nimport {Coordinates, DIRECTIONS_ORDER, DirectionType, ICoordinates} from \"../Coordinates/Coordinates\";\nimport {Point} from \"../Point/Point\";\n\nexport enum CommandType {\n    Move = \"M\",\n    RotateLeft = \"L\",\n    RotateRight = \"R\",\n}\n\nexport interface IMarsRover {\n    coordinates: ICoordinates;\n    execute(command: string | CommandType[]): string;\n}\n\nexport interface IMarsRoverConstructor {\n    new(grid: Grid): IMarsRover;\n}\n\nexport const MarsRover: IMarsRoverConstructor = class implements IMarsRover {\n    coordinates = new Coordinates(\"0:0:N\");\n\n    constructor(private readonly grid: Grid) {}\n\n    private tryMoveTowardsPoint(point: Point, onSuccess: Function) {\n        if (this.grid.hasObstacleOnPoint(point)) {\n            this.coordinates.hasObstacles = true;\n            return;\n        }\n\n        this.coordinates.hasObstacles = false;\n        onSuccess();\n    }\n\n    private moveForward(): void {\n        switch (this.coordinates.direction) {\n            case DirectionType.East: {\n                const desiredX = (this.coordinates.position.x + 1) % this.grid.cols;\n                this.tryMoveTowardsPoint(new Point(desiredX, this.coordinates.position.y), () => this.coordinates.position.x = desiredX)\n                break;\n            }\n            case DirectionType.West: {\n                const desiredX = (!this.coordinates.position.x ? this.grid.cols : this.coordinates.position.x) - 1;\n                this.tryMoveTowardsPoint(new Point(desiredX, this.coordinates.position.y), () => this.coordinates.position.x = desiredX)\n                break;\n            }\n            case DirectionType.North: {\n                const desiredY = (this.coordinates.position.y + 1) % this.grid.rows;\n                this.tryMoveTowardsPoint(new Point(this.coordinates.position.x, desiredY), () => this.coordinates.position.y = desiredY);\n                break;\n            }\n            case DirectionType.South: {\n                const desiredY = (!this.coordinates.position.y ? this.grid.rows : this.coordinates.position.y) - 1;\n                this.tryMoveTowardsPoint(new Point(this.coordinates.position.x, desiredY), () => this.coordinates.position.y = desiredY);\n                break;\n            }\n            default:\n                throw new Error(\"Unknown direction!\")\n        }\n    }\n\n    execute(commands: string | CommandType[]): string {\n        if (!commands) {\n            throw new Error(\"Command/s is not valid!\");\n        }\n\n        for (const _ of typeof commands === \"string\" ? commands.split(\"\"): commands) {\n            const command = _ as CommandType;\n            switch (command) {\n                case CommandType.Move:\n                    this.moveForward();\n                    break;\n                case CommandType.RotateRight:\n                    this.coordinates.direction = DIRECTIONS_ORDER[(DIRECTIONS_ORDER.indexOf(this.coordinates.direction) + 1) % DIRECTIONS_ORDER.length];\n                    this.coordinates.hasObstacles = false;\n                    break;\n                case CommandType.RotateLeft:\n                    const index = DIRECTIONS_ORDER.indexOf(this.coordinates.direction);\n                    this.coordinates.direction = DIRECTIONS_ORDER[(!index ? DIRECTIONS_ORDER.length : index) - 1];\n                    this.coordinates.hasObstacles = false;\n                    break;\n                default:\n                    throw new Error(\"Command type not known!\");\n            }\n        }\n\n        return this.coordinates.toString();\n    }\n}\n\nexport default MarsRover;\n","import React from \"react\";\n\nexport interface IControlButtonProps {\n    children: string;\n    onClick?: Function;\n}\n\nconst ControlButton: React.FC<IControlButtonProps> = ({ children, onClick }) => (\n    <button className=\"bg-gray-300 text-black rounded m-2\" onClick={(_) => onClick?.()}>{children}</button>\n);\n\nexport default ControlButton;","import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport {Grid} from \"../../features/Grid/Grid\";\nimport Box, {BoxType} from \"../Box/Box\";\nimport {Point} from \"../../features/Point/Point\";\nimport MarsRover, {CommandType} from \"../../features/MarsRover/MarsRover\";\nimport {DirectionType} from \"../../features/Coordinates/Coordinates\";\nimport {useForceUpdate} from \"../../features/utils\";\nimport ControlButton from \"../ControlButton/ControlButton\";\n\nexport interface IBoardProps {\n    grid: Grid;\n}\n\nexport const Controls = {\n    Move: [\"k\", \"ArrowUp\"],\n    RotateLeft: [\"j\", \"ArrowLeft\"],\n    RotateRight: [\"l\", \"ArrowRight\"],\n}\n\nexport const DirectionToRotateMap: Record<DirectionType, string> = {\n    [DirectionType.East]: \"\",\n    [DirectionType.North]: \"-rotate-90\",\n    [DirectionType.West]: \"rotate-180\",\n    [DirectionType.South]: \"rotate-90\",\n};\n\nconst Board: React.FC<IBoardProps> = (props) => {\n    const rover = useRef(new MarsRover(props.grid));\n    const [visitedPoints, setVisitedPoints] = useState<Point[]>([rover.current.coordinates.position.clone()]);\n    const forceUpdate = useForceUpdate();\n\n    const moveForward = useCallback(() => {\n        rover.current.execute([CommandType.Move]);\n        setVisitedPoints([...visitedPoints, rover.current.coordinates.position.clone()]);\n    }, [visitedPoints]);\n\n    const rotate = useCallback((direction: CommandType.RotateLeft | CommandType.RotateRight) => {\n        rover.current.execute([direction]);\n        forceUpdate();\n    }, [forceUpdate])\n\n    useEffect(() => {\n        const onKeyDown = (event: KeyboardEvent) => {\n            if (Controls.Move.includes(event.key)) {\n                moveForward();\n                return;\n            }\n\n            if (Controls.RotateLeft.includes(event.key)) {\n                rotate(CommandType.RotateLeft);\n                return;\n            }\n\n            if (Controls.RotateRight.includes(event.key)) {\n                rotate(CommandType.RotateRight);\n                return;\n            }\n        };\n\n        window.addEventListener(\"keydown\", onKeyDown);\n\n        return () => {\n            window.removeEventListener(\"keydown\", onKeyDown)\n        }\n    }, [moveForward, rotate]);\n\n    const getType = useCallback((currentPoint: Point): BoxType => {\n        if (props.grid.hasObstacleOnPoint(currentPoint)) {\n            return BoxType.Obstacle;\n        }\n\n        if (rover.current.coordinates.position.equals(currentPoint)) {\n            return BoxType.Rover;\n        }\n\n        if (visitedPoints.some(point => point.equals(currentPoint))) {\n            return BoxType.Visited;\n        }\n\n        return BoxType.NotVisited;\n    }, [props.grid, visitedPoints]);\n\n    const rows = Array(props.grid.cols).fill(null)\n        .map((_, row) => {\n                const cols = Array(props.grid.rows).fill(null)\n                    .map((_, col) => {\n                            const id = `e_${row}_${col}`;\n                            const currentPoint = new Point(row, col);\n                            const type = getType(currentPoint);\n\n                            return (\n                                <div\n                                    key={id}\n                                    className={type === BoxType.Rover ? `transform ${DirectionToRotateMap[rover.current.coordinates.direction]}` : \"\"}\n                                >\n                                    <Box\n                                        type={type}\n                                        data-testid={id}\n                                    />\n                                </div>\n                            );\n                        }\n                    );\n\n                return (\n                    <div key={row} className=\"flex flex-col-reverse\">\n                        {cols}\n                    </div>\n                );\n            }\n        );\n\n    return (\n        <div className=\"flex flex-col items-center space-x-5 space-y-5\">\n            {rover.current.coordinates.hasObstacles && <span>BLOCKED BY OBSTACLE!</span>}\n            <div className=\"flex\">\n                {rows}\n            </div>\n            <div className=\"flex flex-row justify-between content-center\">\n                <ControlButton onClick={() => rotate(CommandType.RotateLeft)}>Rotate Left</ControlButton>\n                <ControlButton onClick={moveForward}>Move Forward</ControlButton>\n                <ControlButton onClick={() => rotate(CommandType.RotateRight)}>Rotate Right</ControlButton>\n            </div>\n        </div>\n    );\n}\n\nexport default Board;","import {Point} from \"../Point/Point\";\n\nexport class Grid {\n    public readonly rows: number;\n    public readonly cols: number;\n    public readonly obstacles: Point[];\n\n    constructor(rows: number, cols?: number | Point[], obstacles?: Point[]) {\n        this.rows = rows;\n        this.cols = rows;\n        this.obstacles = obstacles ?? [];\n\n        if (typeof cols === \"number\") {\n            this.cols = cols;\n        } else if (Array.isArray(cols)) {\n            this.obstacles = cols;\n        }\n    }\n\n    hasObstacleOnPoint = (desiredPoint: Point) => this.obstacles\n        .some(point => point.x === desiredPoint.x && point.y === desiredPoint.y)\n}\n","import React from 'react';\nimport './App.css';\nimport Board from \"./components/Board/Board\";\nimport {Grid} from \"./features/Grid/Grid\";\nimport {Point} from \"./features/Point/Point\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board grid={new Grid(5, 7, [ new Point(1, 3) ])} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}